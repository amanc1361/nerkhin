# name: Build and Deploy to VPS (Final ✅)

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     name: Build Images and Deploy to VPS
#     runs-on: self-hosted
#     # runs-on: ubuntu-latest
#     env:
#       DEPLOY_TAG: deploy-${{ github.ref_name }}-run-${{ github.run_number }}

#     steps:
#     - name: 📥 Checkout Code
#       uses: actions/checkout@v2

#     - name: 🐳 Set up Docker Buildx
#       uses: docker/setup-buildx-action@v3

#     # ✅ 1. Generate .env files before docker build
#     - name: ✍️ Generate .env files from secrets
#       run: |
#         echo "${{ secrets.BACKEND_ENV_CONTENT }}" > backend.env
#         echo "${{ secrets.FRONTEND_ENV_CONTENT }}" > frontend.env

#     # ✅ 2. Build and Save Backend Image
#     - name: 🐳 Build and Save Backend Image
#       run: |
#         docker build -t backend:${DEPLOY_TAG} ./backend
#         docker save -o backend-${DEPLOY_TAG}.tar backend:${DEPLOY_TAG}

#     # ✅ 3. Build and Save Frontend Image with .env.frontend injected
#     - name: 🐳 Build and Save Frontend Image
#       run: |
#         cp frontend.env ./frontend/.env.frontend
#         docker build -t frontend:${DEPLOY_TAG} ./frontend
#         docker save -o frontend-${DEPLOY_TAG}.tar frontend:${DEPLOY_TAG}

#     # ✅ 4. Prepare deploy package
#     - name: 📂 Create deploy package
#       run: |
#         mkdir -p deploy_package
#         mv backend-${DEPLOY_TAG}.tar frontend-${DEPLOY_TAG}.tar deploy_package/
#         cp docker-compose.template.yml deploy.sh backend.env frontend.env nginx.conf deploy_package/

#     # ✅ 5. Clean remote directory
#     - name: 🧹 Clean remote deploy directory
#       uses: appleboy/ssh-action@v0.1.2
#       with:
#         host: ${{ secrets.REMOTE_HOST }}
#         username: ${{ secrets.REMOTE_USER }}
#         key: ${{ secrets.REMOTE_SSH_KEY }}
#         script: |
#           rm -rf ~/nerkhin/deploy_package
#           mkdir -p ~/nerkhin/deploy_package

#     # ✅ 6. Upload to server
#     - name: 🚚 Upload deploy package to VPS
#       uses: appleboy/scp-action@master
#       with:
#         host: ${{ secrets.REMOTE_HOST }}
#         username: ${{ secrets.REMOTE_USER }}
#         key: ${{ secrets.REMOTE_SSH_KEY }}
#         source: "deploy_package"
#         target: "/home/${{ secrets.REMOTE_USER }}/nerkhin/deploy_package"
#         strip_components: 1

#     # ✅ 7. Run deploy script on VPS
#     - name: 🖥 Deploy on VPS
#       uses: appleboy/ssh-action@v0.1.2
#       with:
#         host: ${{ secrets.REMOTE_HOST }}
#         username: ${{ secrets.REMOTE_USER }}
#         key: ${{ secrets.REMOTE_SSH_KEY }}
#         script: |
#            sudo systemctl stop nginx || true
#            sudo systemctl disable nginx || true
#            sudo fuser -k 80/tcp  || true
#            sudo fuser -k 443/tcp || true
#            cd ~/nerkhin/deploy_package
#            chmod +x deploy.sh
#            ./deploy.sh ${{ env.DEPLOY_TAG }}

name: Build and Deploy to VPS (Final ✅)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build Images and Deploy to VPS
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    env:
      DEPLOY_TAG: deploy-${{ github.ref_name }}-run-${{ github.run_number }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4  # --- Updated to v4 for best practice

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # <<< ADDED STEP / مرحله اضافه شده >>>
    # This step logs into Docker Hub using secrets to avoid rate limiting.
    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # ✅ 1. Generate .env files before docker build
    - name: ✍️ Generate .env files from secrets
      run: |
        echo "${{ secrets.BACKEND_ENV_CONTENT }}" > backend.env
        echo "${{ secrets.FRONTEND_ENV_CONTENT }}" > frontend.env

    # ✅ 2. Build and Save Backend Image
    - name: 🐳 Build and Save Backend Image
      run: |
        docker build -t backend:${DEPLOY_TAG} ./backend
        docker save -o backend-${DEPLOY_TAG}.tar backend:${DEPLOY_TAG}

    # ✅ 3. Build and Save Frontend Image with .env.frontend injected
    - name: 🐳 Build and Save Frontend Image
      run: |
        cp frontend.env ./frontend/.env.frontend
        docker build -t frontend:${DEPLOY_TAG} ./frontend
        docker save -o frontend-${DEPLOY_TAG}.tar frontend:${DEPLOY_TAG}

    # ✅ 4. Prepare deploy package
    - name: 📂 Create deploy package
      run: |
        mkdir -p deploy_package
        mv backend-${DEPLOY_TAG}.tar frontend-${DEPLOY_TAG}.tar deploy_package/
        cp docker-compose.template.yml deploy.sh backend.env frontend.env nginx.conf deploy_package/

    # ✅ 5. Clean remote directory
    - name: 🧹 Clean remote deploy directory
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        script: |
          rm -rf ~/nerkhin/deploy_package
          mkdir -p ~/nerkhin/deploy_package

    # ✅ 6. Upload to server
    - name: 🚚 Upload deploy package to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        source: "deploy_package"
        target: "/home/${{ secrets.REMOTE_USER }}/nerkhin/deploy_package"
        strip_components: 1

    # ✅ 7. Run deploy script on VPS
    - name: 🖥 Deploy on VPS
      uses: appleboy/ssh-action@v0.1.2
      with:
        host: ${{ secrets.REMOTE_HOST }}
        username: ${{ secrets.REMOTE_USER }}
        key: ${{ secrets.REMOTE_SSH_KEY }}
        script: |
           sudo systemctl stop nginx || true
           sudo systemctl disable nginx || true
           sudo fuser -k 80/tcp  || true
           sudo fuser -k 443/tcp || true
           cd ~/nerkhin/deploy_package
           chmod +x deploy.sh
           ./deploy.sh ${{ env.DEPLOY_TAG }}